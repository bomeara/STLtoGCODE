% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stg.R
\name{stl_regularize}
\alias{stl_regularize}
\title{Regularize the object}
\usage{
stl_regularize(
  stl,
  fineness = 10,
  nmax = 20,
  zero_position_xy = "bottomleft",
  zero_position_z = "top",
  verbose = TRUE
)
}
\arguments{
\item{stl}{object from stl_load()}

\item{fineness}{how many points to make for each point per dimension in the original stl}

\item{nmax}{how many nearby points to use for kriging. Inf to use all points.}

\item{zero_position_xy}{can be "bottomleft", "center", or "current".}

\item{zero_position_z}{can be "top", "bottom", or "current".}

\item{verbose}{if TRUE, report on progress}
}
\value{
A matrix with x, y, and z points; x and y are evenly spaced grid
}
\description{
The STL object might only be defined over a certain area: a model of a mountain might stop at the irregular base. The points might also not be on a regular grid, which makes the analysis in R difficult. So we will use a technique called kriging to smoothly interpolate the points. The question is how fine to make the final grid: does it have as many points as the original points, or is it finer? By default it will have 5 points between every given point on each dimension. If it's too large, consider using meshlab to scale it down well before loading here.
}
\details{
zero_position resets the x and y positions so that (0,0) can be the bottom left of the structure ("bottomleft"), the center ("center"), or kept as is ("current")
}
\examples{
cat_paw <- stl_load("~/Downloads/catsnowscaled.stl")
cat_paw_reg <- stl_regularize(cat_paw)
}
